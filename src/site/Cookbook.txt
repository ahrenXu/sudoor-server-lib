App
	1, Add Controller to accept request, invoke Domain Model and return View name
		Controller include Web Controller, WebService Controller and so on
		Convention: 
			One particular Controller Object per Module
			@RequestMapping Path Naming Convention:
				/${module Name}/${method Name}
				E.g.
					/account/getAccountName
			Controller Naming Convention: 
				${base Package}.${module Name}.controller.${Controller Name}.java
				E.g.
					com.comp.team.product.account.controller.AccountController.java
					com.comp.team.product.account.controller.AccountWebService.java
					com.comp.team.product.account.controller.AccountWebServiceImpl.java

	2, Add Domain Model to impl biz logic(Include Data manipulation)
		Convention: 
			Non-Data Model Naming Convention: 
				${base Package}.${module Name}.model.${Model Name}.java
				E.g.
					com.comp.team.product.loan.model.ValidateAndApplyLoan.java
					
			Data Model Naming Convention: 
				${base Package}.${module Name}.model.entity.${Data Model Name}.java
				E.g.
					com.comp.team.product.loan.model.entity.LoanInfo.java

	3, Add View to present Domain Model
		View is implemented via thymeleaf template
		Convention: 
			View Naming Convention:
				src/main/resources/templates/${module Name}/${page Name}.html
				E.g.
					src/main/resources/templates/account/accountSummary.html



DB Access
	DB manipulation is done via Repository Object
	Repository is just a Interface which extends JpaRepository, you no need to write impl, Spring Data will generate impl for you. 
		E.g. 
			public interface CredentialUserRepository extends JpaRepository<CredentialUser, String> {
			}
	
	Repository Naming Convention: 
		${base Package}.${module Name}.model.repository.${Data Model Name}Repository.java
		E.g.
			com.comp.team.product.loan.model.repository.LoanInfoRepository.java
			com.comp.team.product.loan.model.repository.AddressInfoRepository.javal
	
	Usage:
		a, Inject Repository object into your Domain Model(SPRING BEAN) field via spring annotation. 
			Note: To make annotation injection work, Domain Model must be registed as a spring bean. 
			E.g.
				@Autowired
				private CredentialUserRepository credentialUserRepository;
				
		b, Invoke parent Interface methods to manipulate DB.
			E.g.
				CredentialUser user=credentialUserRepository.findOne(userName);
	


Security & Login/Logout
	Security is implemented in Spring Security, so just need to config spring security config.
	E.g.
		@Configuration
		@Order(SecurityProperties.ACCESS_OVERRIDE_ORDER - 10)
		public class ObizSecurityConfig extends WebSecurityConfigurerAdapter{
			@Override
			protected void configure(HttpSecurity http) throws Exception {
				http
					.regexMatcher("/app/account/.*")
					.formLogin()
					.and()
						.logout()
							.deleteCookies("JSESSIONID")
					.and()
						.authorizeRequests()
							.regexMatchers("/app/account/.*").permitAll()
					.and()
						.rememberMe();
			}
		}
	
	Form Login:
		1, Config login page
			There is a default login page(Generated in DefaultLoginPageGeneratingFilter) provided under URL: "/spring_security_login", you can impl customized login page & specify in form-login's login-page attribute
			E.g.
				http
					.formLogin()
						.loginPage("/app/account/login.html")
		
		2, Config login processor URL
			There is a default login processor(UsernamePasswordAuthenticationFilter) under URL: "/j_spring_security_check", you can impl customized processor & specify in form-login's login-processing-url attribute
			E.g.
				http
					.formLogin()
						.loginProcessingUrl("/app/account/login")

	Logout:
		Config logout success page
			By default logout success will forward to "/", you can impl customized logout page & specify in logout's logout-success-url attribute
			E.g.
				http.logout()
					.logoutSuccessUrl("/app/web/account/logout.html")
	
	
Web Service
	Web Service is supported by cxf in this framework, it provide 2 styles SOAP & REST
	
	SOAP Web Service
		If you are Consumer(Client):
			1, Consumer(Client) get wsdl from Provider(Server), so that he can know:
				request & response elements
				service URL
			
			2, Generate Stub from wsdl
				a, Add maven plugin "cxf-codegen-plugin" to your maven build(if not in maven build)
				b, Put wsdl in "src/main/resources/wsdl", plugin "cxf-codegen-plugin" will generate Stub for you during build
					Note:
						Generated Sub in: "target/generated-sources/cxf"
				Note:
					Stub Will do:
						Encapsulate Codes to marshall & unmarshall request & responses (Message to Object mapping)
						Send Msg & Receive Response
			
			3, Use Stub to send & receive Msg
	
	
		If you are Provider(Server):
			1, Create Service Interface
				Any Interface annotated with @WebService should be ok
				Convention: 
					Service Interface Naming Convention: 
						${base Package}.${module Name}.controller.${Service Interface Name}.java
						E.g.
							com.comp.team.product.account.controller.AccountService.java
							@WebService
							public interface AccountService {
								public String getAccountName();
							}
					
			
			2, Create Service Impl
				Class to impl the above defined interface, should be annotated with @WebService & @Component
				Convention: 
					Service Impl Naming Convention: 
						${base Package}.${module Name}.controller.${Service Impl Name}.java
						E.g.
							com.comp.team.product.account.controller.AccountServiceImpl.java
							@Component
							@WebService
							public class AccountServiceImpl implements AccountService {
								@Override
								public String getAccountName() {
									return "Hello World";
								}
							}
					
			3, Register in Spring
				a, create/update "src/main/resources/spring/ws/ws-config-${module Name}.xml"
					E.g.
						<?xml version="1.0" encoding="UTF-8"?>
						<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jaxws="http://cxf.apache.org/jaxws"
							xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd">
						</beans>
						
				b, add entry:
					<jaxws:endpoint id="${service Name}ServiceEndPoint" implementor="#${uncaptialized Service Impl Class Name }" address="/soap/${module Name}/${service Name}Service" />
					E.g.
						<jaxws:endpoint id="accountServiceEndPoint" implementor="#accountServiceImpl" address="/soap/account/accountService" />
			
	
	REST Web Service
		If you are Provider(Server):
			1, Create Resource (Any class be annotated with @Path)
				Convention: 
					Resource Naming Convention: 
						${base Package}.${module Name}.controller.${Resource Name}.java
						E.g.
							com.comp.team.product.account.controller.AccountServiceImpl.java
							@Path("/sudoor/SpringSecurity")
							public class SpringSecurityResource {
								@GET
								@Path("Authentication")
								@Produces(MediaType.APPLICATION_JSON)
								public Authentication getAuthentication() {
									Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
									return authentication;
								}
							}
							
				2, Your resource can be access via URL ${host}/${context Path}/data/ws/rest/${root resource path}/${sub resource path}
					E.g.
						http://yourhost/product/data/ws/rest/sudoor/SpringSecurity/Authentication


OData
	URL:
		http://yourhost/product/data/odata.svc


Web(Static Contents)
	1, Add static files into path: "src/main/resources/static/web/${module Name}"
	2, Refer to these static files via "/${context Path}/${dispatchServlet Path}/web/${module Name}/${satic File Name}"
		E.g.
			"/product/app/web/loan/loanInfo.js"

				
				
Email
	E.g.
		public class MailTest {
	
			@Autowired
			JavaMailSender mailSender;
		
			@Test
			public void test() throws MessagingException {
				try {
					MimeMessage mimeMessage = mailSender.createMimeMessage();
					MimeMessageHelper mimeMessageHelper = new MimeMessageHelper(mimeMessage, "UTF-8");
					mimeMessageHelper.setSubject("test");
					mimeMessageHelper.setTo("xfcjscn@163.com");
					mimeMessageHelper.setFrom("xfcjscn@163.com");
					mimeMessageHelper.setText("æˆ‘", false);
					mailSender.send(mimeMessage);
				} catch (Exception e) {
				}
			}
		}
	
	
	
Captcha Image Validate
	1, Add image tag with src: "/${context Path}/${dispatchServlet Path}/sudoor/captcha-image.html" in your page to generate image
		E.g.
			<img src="/product/app/sudoor/captcha-image.html" />
			
	2, Add input with name: "_captcha" to capture the image contents 
		E.g.
			<input type="text" name="_captcha" />
			
	3, Inject & Invoke CaptchaValidator.validate() in your controller to validate
	
	U can validate Captcha via form submit or rest call : GET - /data/ws/rest/sudoor/captcha/validate

Pagination
	Client:
		We use 3rd part component: https://github.com/paulirish/infinite-scroll. Pls refer to related doc
	Server:
		a, Use reposotory's findAll(Pageable pageable) to retrieve partial data from DB
			E.g.
				Page<User> users = repository.findAll(newPageRequest(1, 20));
				
		b, User Rest Service to communicate with host via JSON
		

Ajax Request
	For Ajax POST requests, pls include csrf value in header, as Spring Security will do CSRF check
	
	Steps to add csrf in ajax header:
		a, Add _csrf & _csrf_header to html header meta tag:
			<html>
				<head>
					<meta name="_csrf" content="${_csrf.token}"/>
					<meta name="_csrf_header" content="${_csrf.headerName}"/>
				</head>
		b, Include js: web/security/security.js in your page
			
			
Password Strength Check
	1, Include script & css
		<script th:src="@{/app/web/strength.js/strength.js}"></script>
		<link rel="stylesheet" th:href="@{/app/web/strength.js/strength.css}" type="text/css" media="screen"></link>
	2, Apply strength check: 
		$(document).ready(function ($) {
		     $('#myPassword').strength();
		});
	
	For more info pls check: 
		http://git.aaronlumsden.com/strength.js/
		
		
HttpSession
	In consideration of 1, DRY principle 2, Function testability. DONNOT use session directly, session status should be retrieved from session scoped bean
	Session Scope Bean define:
		@Component
		@Scope(value="session",proxyMode=ScopedProxyMode.TARGET_CLASS)


Event Publish & Subscribe:
	Publish:
		1, Inject EventMessageGateway/AsyncEventMessageGateway into your component
		2, Invoke EventMessageGateway/AsyncEventMessageGateway.publishEvent() to publish event
		3, For EventMessageGateway If you want to get the Subscribe's execution status(success/failure), you can add try/cache out of EventMessageGateway.publishEvent()
			and get real exception via e.getRootCause()
			
	Subscribe:
		Write ServiceActivator(Class annotated with @MessageEndpoint, method annotated with @ServiceActivator(inputChannel = "eventPublishChannel") / @ServiceActivator(inputChannel = "asyncEventPublishChannel"))
			E.g.
				@MessageEndpoint
				public class DefaultEventServiceActivator {
					final Logger logger = LoggerFactory.getLogger(DefaultEventServiceActivator.class);
				
					@ServiceActivator(inputChannel = "eventPublishChannel")
					public void handle(Object event) throws Exception {
						logger.debug("Get Event: {} @ {}", event, new Date());
					}
					
					@ServiceActivator(inputChannel = "asyncEventPublishChannel")
					public void handleAsyncEvent(Object event) throws Exception {
						logger.debug("Get Event: {} @ {}", event, new Date());
					}
				}


Logging:
	Need to use slf4j.
	E.g.
		import org.slf4j.Logger;
		import org.slf4j.LoggerFactory;
		import org.springframework.security.access.prepost.PreAuthorize;
		import org.springframework.stereotype.Component;
		
		/**
		 * Created by Administrator on 14-3-12.
		 * This class object must be registered & retrieved from spring context, as @PreAuthorize need sping AOP support.
		 */
		
		@Component
		public class SSChecker {
			final Logger logger = LoggerFactory.getLogger(SSChecker.class);
		
			@PreAuthorize("hasPermission(#target, #method)")
			public void check(Object target, String method) {
				logger.debug("Grant permission [{}] to name [{}]", method, target);
			}
		}
	


Template:
	E.g.
		public class TemplateEngineTest {
			@Autowired
			TemplateEngine templateEngine;
		
			@Test
			public void test() {
				Context ctx = new Context();
				ctx.setVariable("key", "dyna content");
				String res = templateEngine.process("xml/paymentRequest", ctx);
				System.out.println(res);
			}
		}
				
		
Unit Test:
	E.g.
		@RunWith(SpringJUnit4ClassRunner.class)
		@SpringApplicationConfiguration(classes = Application.class)
		@WebAppConfiguration
		@EnableTransactionManagement
		@IntegrationTest
		public class FileResourceTest {
		
			@Autowired
			TestUtils testUtils;
		
			static Client client = null;
		
			@BeforeClass
			public static void init() {
				client = ClientBuilder.newBuilder().build();
			}
		
			@Test
			public void retrieveNotExistFile() {
				WebTarget target = client.target(testUtils.getEmbeddedServletContainerBaseURL() + "/data/ws/rest").path("/tools/fileupload/File/999999999");
				Response response = target.request(MediaType.WILDCARD_TYPE).get();
				int statusCode = response.getStatus();
				assert (statusCode == 401);
			}
		}