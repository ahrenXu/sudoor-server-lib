App
	1, Add Controller to accept request, invoke Domain Model and return View name
		Controller include Web Controller, WS Controller and so on
		Convention: 
			One particular Controller Object per Module
			@RequestMapping Path Naming Convention:
				/${module Name}/${method Name}
				E.g.
					/account/getAccountName
			Controller Naming Convention: 
				${base Package}.${module Name}.controller.${Controller Name}.java
				E.g.
					com.comp.team.product.account.controller.AccountController.java

	2, Add Domain Model to impl biz logic(Include Data manipulation)
		Convention: 
			Non-Data Model Naming Convention: 
				${base Package}.${module Name}.model.${Model Name}.java
				E.g.
					com.comp.team.product.loan.model.ValidateAndApplyLoan.java
					
			Data Model Naming Convention: 
				${base Package}.${module Name}.model.entity.${Data Model Name}.java
				E.g.
					com.comp.team.product.loan.model.entity.LoanInfo.java

	3, Add View to present Domain Model
		View is implemented via thymeleaf template
		Convention: 
			View Naming Convention:
				src/main/resources/templates/${module Name}/${page Name}.html
				E.g.
					src/main/resources/templates/account/accountSummary.html



DB Access
	DB manipulation is done via Repository Object
	Repository is just a Interface which extends JpaRepository, you no need to write impl, Spring Data will generate impl for you. 
		E.g. 
			public interface CredentialUserRepository extends JpaRepository<CredentialUser, String> {
			}
	
	Repository Naming Convention: 
		${base Package}.${module Name}.model.repository.${Data Model Name}Repository.java
		E.g.
			com.comp.team.product.loan.model.repository.LoanInfoRepository.java
			com.comp.team.product.loan.model.repository.AddressInfoRepository.javal
	
	Usage:
		a, Inject Repository object into your Domain Model(SPRING BEAN) field via spring annotation. 
			Note: To make annotation injection work, Domain Model must be registed as a spring bean. 
			E.g.
				@Autowired
				private CredentialUserRepository credentialUserRepository;
				
		b, Invoke parent Interface methods to manipulate DB.
			E.g.
				CredentialUser user=credentialUserRepository.findOne(userName);
	


Security & Login/Logout
	Security is implemented in Spring Security, so just need to config spring security config.
	E.g. 
			<!-- for form submision -->
			<security:http use-expressions="false" request-matcher="regex" pattern="/app/connect.*|/app/linkedin.*">
				<security:intercept-url pattern=".*" access="ROLE_USER" />
				<security:form-login />
				<security:remember-me />
				<security:csrf />
				<security:logout delete-cookies="JSESSIONID" />
				<security:session-management>
					<security:concurrency-control max-sessions="1" />
				</security:session-management>
			</security:http>
	Convention: 
		One config file per Module
		Security Config Naming Convention: 
			src/main/resources/spring/security/security-config-${module Name}.xml
			E.g.
				src/main/resources/spring/security/security-config-loan.xml
	
	Form Login:
		1, Config login page
			There is a default login page provided under URL: "/spring_security_login", you can impl customized login page & specify in form-login's login-page attribute
			E.g.
				<security:form-login login-page="/app/web/acount/login.html"/>
		
		2, Config login processor URL
			There is a default login processor under URL: "/j_spring_security_check", you can impl customized processor & specify in form-login's login-processing-url attribute
			E.g.
				<security:form-login login-processing-url="/app/acount/login"/>

	Logout:
		1, Config logout processor URL
			There is a default logout processor under URL: "/j_spring_security_logout", you can impl customized processor & specify in logout's logout-url attribute
			E.g.
				<security:logout logout-url="/app/account/logout" />
	
		2, Config logout success page
			By default logout success will forward to "/", you can impl customized logout page & specify in logout's logout-success-url attribute
			E.g.
				<security:logout logout-success-url="/app/web/account/logout.html" />
	
	
	
Web Service
	If you are Consumer(Client):
		1, Consumer(Client) get wsdl from Provider(Server), so that he can know:
			request & response elements
			service URL
		
		2, Generate Stub from wsdl
			a, Add maven plugin "cxf-codegen-plugin" to your maven build(if not in maven build)
			b, Put wsdl in "src/main/resources/wsdl", plugin "cxf-codegen-plugin" will generate Stub for you during build
				Note:
					Generated Sub in: "target/generated-sources/cxf"
			Note:
				Stub Will do:
					Encapsulate Codes to marshall & unmarshall request & responses (Message to Object mapping)
					Send Msg & Receive Response
		
		3, Use Stub to send & receive Msg


	If you are Provider(Server):
		1, Create Service Interface
			Any Interface annotated with @WebService should be ok
			Convention: 
				Service Interface Naming Convention: 
					${base Package}.${module Name}.controller.${Service Interface Name}.java
					E.g.
						com.comp.team.product.account.controller.AccountService.java
						@WebService
						public interface AccountService {
							public String getAccountName();
						}
				
		
		2, Create Service Impl
			Class to impl the above defined interface, should be annotated with @WebService & @Component
			Convention: 
				Service Impl Naming Convention: 
					${base Package}.${module Name}.controller.${Service Impl Name}.java
					E.g.
						com.comp.team.product.account.controller.AccountServiceImpl.java
						@Component
						@WebService
						public class AccountServiceImpl implements AccountService {
							@Override
							public String getAccountName() {
								return "Hello World";
							}
						}
				
		3, Register in Spring
			a, create/update "src/main/resources/spring/ws/ws-config-${module Name}.xml"
				E.g.
					<?xml version="1.0" encoding="UTF-8"?>
					<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jaxws="http://cxf.apache.org/jaxws"
						xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd">
					</beans>
					
			b, add entry:
				<jaxws:endpoint id="${service Name}ServiceEndPoint" implementor="#${uncaptialized Service Impl Class Name }" address="/${module Name}/${service Name}Service" />
				E.g.
					<jaxws:endpoint id="accountServiceEndPoint" implementor="#accountServiceImpl" address="/account/accountService" />
				


Web(Static Contents)
	1, Add static files into path: "src/main/resources/static/web/${module Name}"
	2, Refer to these static files via "/${context Path}/${dispatchServlet Path}/web/${module Name}/${satic File Name}"
		E.g.
			"/product/app/web/loan/loanInfo.js"

				
				
Email
	Inject MailClient & send()
	
	
	
Captcha Image Validate
	1, Add image tag with src: "/${context Path}/${dispatchServlet Path}/sudoor/captcha-image.html" in your page to generate image
		E.g.
			<img src="/product/app/sudoor/captcha-image.html" />
			
	2, Add input with name: "_captcha" to capture the image contents 
		E.g.
			<input type="text" name="_captcha" />
			
	3, Inject & Invoke CaptchaValidator.validate() in your controller to validate
	
	

